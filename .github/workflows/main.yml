name: Package

on:
  workflow_dispatch:
  push:
    paths:
      # run when actions or source code are changed
      - .github/workflows/*.yml
      - src/**
      - Cargo.toml
      - Cargo.lock
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Run Cargo build step and cache for later
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.value }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: cache
        name: Cache Build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: Build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', 'src/**') }}

      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cargo build --verbose
          cargo build --release --verbose

      - id: version
        name: Versioning
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: Cargo.toml
          field: package.version

  # Formats package with `cargo fmt`
  format:
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: ./.github/actions/build

      - name: Format
        run: cargo fmt

      - name: Commit Code
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: formats source code"
          file_pattern: "src/**"

  # Lints package using `cargo clippy`
  lint:
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: build

    env:
      RUSTFLAGS: -Dwarnings

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: ./.github/actions/build

      - name: Lint
        run: cargo clippy --all-targets --all-features

  # Tests the package
  test:
    runs-on: ubuntu-latest
    needs: build

    outputs:
      coverage: ${{ steps.coverage.outputs.value }}
      report-url: ${{ steps.artifact.outputs.artifact-url }}
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: ./.github/actions/build

      - name: Test
        # we run testing seperately as it can be done without rebuilding
        # whilst `cargo tarpaulin` does tests, it often needs to rebuild
        # the entire library due to using vastly different compiler flags
        #
        # doing it this way allows testing to fail quickly if a test fails
        run: cargo test --tests

      - id: cache
        name: Cache Coverage
        uses: actions/cache@v4
        with:
          path: |
            ./tarpaulin-report.html
            ./tarpaulin-coverage.txt
          key: Coverage-${{ runner.os }}-${{ hashFiles('target/**') }}

      - name: Install `cargo tarpaulin`
        if: steps.cache.outputs.cache-hit != 'true'
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-tarpaulin

      - id: coverage
        name: Coverage
        run: |
          if [ ${{ steps.cache.outputs.cache-hit }} ]; then
            cov=$(cat ./tarpaulin-coverage.txt)
          else
            cov=$(cargo tarpaulin --engine llvm --out=Html | tee /dev/stderr | tail -n 1)
            echo $cov > ./tarpaulin-coverage.txt
          fi
          printf 'value=%.0f' "${cov:0:5}" >> $GITHUB_OUTPUT
          echo "::notice title=Test Coverage::$cov"

      - id: artifact
        name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report
          path: ./tarpaulin-report.html

  # Generate Github badges
  badges:
    runs-on: ubuntu-latest
    needs: [build, test]
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: ./.github/actions/build

      - name: Version
        uses: just-helpful/debug-badge-action@main
        with:
          logo: rust
          label: crates.io
          status: ${{ needs.build.outputs.version }}
          color: "#ffc933"
          style: for-the-badge
          path: .github/badges/version.svg

      - name: Coverage
        if: needs.test.outputs.cache-hit != 'true'
        uses: just-helpful/debug-badge-action@main
        with:
          logo: codecov
          logo-color: white
          label: coverage
          status: ${{ needs.test.outputs.coverage }}%
          color: "#ee2c80"
          style: for-the-badge
          path: .github/badges/coverage.svg

  # Builds Documentation and syncs README.md
  docs:
    runs-on: ubuntu-latest
    needs: [build, test]
    permissions:
      contents: write

    steps:
      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: ./.github/actions/build

      # This is pretty nasty but I can't seem to find any other way around
      # Github's markdown rendering not allowing links in SVGs
      - name: Coverage URL
        if: needs.test.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sed -i "s;\[coverage-url\]: [^\n]*;\[coverage-url\]: ${{needs.test.outputs.report-url}};g" src/lib.rs

      - name: Install `cargo rdme`
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-rdme

      - name: Sync Readme
        run: cargo rdme

      - name: Generate docs
        run: cargo doc

      - name: Update README
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ðŸ”„ Sync readme"
          file_pattern: ".github/README.md src/**"

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: Documentation
          path: ./target/doc
